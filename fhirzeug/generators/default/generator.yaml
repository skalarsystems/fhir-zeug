# Generator name and module location
name: default
module: fhirzeug.generators.default

output_directory:
  destination: "output"

output_file:
  destination: "pydantic_fhir/r4.py"

copy_examples:
  destination: tests/test_examples/examples

# Base URL for where to load specification data from
specification_url: http://hl7.org/fhir/R4

# To which directory to download to
download_directory:
  destination: downloads

# Configuration where to find templates
template:
  # Whether code generation must be executed
  generate_code: True
  # In which directory to find the templates.
  source: templates
  # the template to use as source when writing enums for CodeSystems; can be `None`
  codesystems_source: codesystems.py.jinja2
  # the template to use as source when writing resource implementations for profiles
  resource_source: resource.py.jinja2

# Configuration for classes and resources
default_base:
  "complex-type": FHIRAbstractBase # the class to use for "Element" types
  resource: FHIRAbstractResource # the class to use for "Resource" types

# Naming rules to apply
naming_rules:
  # whether all resource paths (i.e. modules) should be lowercase
  resource_modules_lowercase: True
  # whether class name generation should use CamelCase
  camelcase_classes: True
  # whether names for enums should be camelCased
  camelcase_enums: True
  # if True, backbone class names prepend their parent's class name
  backbone_class_adds_parent: True

manual_profiles:
  - origpath: ./fhirzeug/generators/python_pydantic/templates/fhirabstractbase.py
    module: fhirabstractbase
    contains:
      - boolean
      - string
      - base64Binary
      - code
      - id
      - decimal
      - integer
      - unsignedInt
      - positiveInt
      - uri
      - oid
      - uuid
      - FHIRAbstractBase

  - origpath: ./fhirzeug/generators/python_pydantic/templates/fhirabstractresource.py
    module: fhirabstractresource
    contains:
      - FHIRAbstractResource

  - origpath: ./fhirzeug/generators/python_pydantic/templates/fhir_basic_types.py
    module: fhirdate
    contains:
      - date
      - dateTime
      - instant
      - time

  - origpath: ./fhirzeug/generators/python_pydantic/templates/fhirsearch.py
    module: fhirsearch
    contains:
      - FHIRSearch

# Mappings for the FHIR class generator.
mapping_rules:
  # Which class names to map to resources and elements
  classmap:
    Any: Resource
    Practitioner.role: PractRole # to avoid Practinioner.role and PractitionerRole generating the same class
    boolean: bool
    integer: FHIRInt
    positiveInt: FHIRPositiveInt
    unsignedInt: FHIRUnsignedInt
    date: FHIRDate
    dateTime: FHIRDateTime
    instant: FHIRInstant
    time: FHIRTime
    decimal: decimal.Decimal
    string: FHIRString
    markdown: FHIRString
    id: FHIRId
    code: FHIRCode # for now we're not generating enums for these
    uri: FHIRString
    url: FHIRString
    canonical: FHIRString
    oid: FHIROid
    uuid: FHIRString
    xhtml: FHIRString
    base64Binary: FHIRBase64Binary

  # Classes to be replaced with different ones at resource rendering time
  replacemap:
    {}
    # Reference: FHIRReference  # `FHIRReference` adds dereferencing capabilities

  # Which class names are native to the language (or can be treated this way)
  natives:
    - bool
    - decimal.Decimal
    - FHIRBase64Binary
    - FHIRCode
    - FHIRDate
    - FHIRDateTime
    - FHIRId
    - FHIRInstant
    - FHIRInt
    - FHIROid
    - FHIRPositiveInt
    - FHIRRequiredString
    - FHIRString
    - FHIRTime
    - FHIRUnsignedInt
    - float
    - int
    - str

  # Which classes are to be expected from JSON decoding
  jsonmap:
    bool: bool
    decimal.Decimal: float
    FHIRBase64Binary: str
    FHIRCode: str
    FHIRDate: str
    FHIRDateTime: str
    FHIRId: str
    FHIRInstant: str
    FHIRInt: str
    FHIROid: str
    FHIRPositiveInt: int
    FHIRRequiredString: str
    FHIRString: str
    FHIRTime: str
    FHIRUnsignedInt: str
    float: float
    int: int
    str: str

  jsonmap_default: dict

  # Properties that need to be renamed because of language keyword conflicts
  reservedmap:
    for: for_
    from: from_
    class: class_
    import: import_
    global: global_
    assert: assert_
    except: except_
    in: in_
    del: del_
    return: return_
    as: as_
    not: not_
    pass: pass_

  # For enum codes where a computer just cannot generate reasonable names
  enum_map:
    "=": eq
    "!=": ne
    "<": lt
    "<=": lte
    ">": gt
    ">=": gte
    "*": max

  # If you want to give specific names to enums based on their URI
  enum_namemap:
    # 'http://hl7.org/fhir/coverage-exception': 'CoverageExceptionCodes',
    "http://terminology.hl7.org/CodeSystem/composition-altcode-kind": "CompositionAltcodeKind"
    "http://terminology.hl7.org/CodeSystem/codesystem-altcode-kind": "CodesystemAltcodeKind"
    "http://hl7.org/fhir/contract-security-category": "ContractSecurityCategoryCodes"
    "http://hl7.org/fhir/contract-security-classification": "ContractSecurityClassificationCodes"
    "http://hl7.org/fhir/contract-scope": "ContractScopeCodes"
    "http://hl7.org/fhir/device-definition-status": "FHIRDeviceDefinitionStatus"
    "http://hl7.org/fhir/device-status": "FHIRDeviceStatus"
    "http://hl7.org/fhir/CodeSystem/medication-statement-status": "MedicationStatementStatusCodes"
    "http://hl7.org/fhir/CodeSystem/medication-status": "MedicationStatusCodes"
    "http://terminology.hl7.org/CodeSystem/observation-category": "ObservationCategoryCodes"
    "http://hl7.org/fhir/secondary-finding": "SecondaryFindingCodes"
    # PractinionerRole is also a DomainResource
    "http://terminology.hl7.org/CodeSystem/practitioner-role": "PractitionerRoleCodes"

  # If certain CodeSystems don't need to generate an enum
  enum_ignore:
    {}
    # 'http://hl7.org/fhir/resource-type-link',
