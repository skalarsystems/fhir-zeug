

class {{ clazz.name }}({{ clazz.superclass.name|default('object')}}):
    """ {{ clazz.short|wordwrap(width=75, wrapstring="\n    ") }}.
{%- if clazz.formal %}

    {{ clazz.formal|wordwrap(width=75, wrapstring="\n    ") }}
{%- endif %}
    """

{%- if clazz.resource_type %}
    resource_type: typing.Literal["{{ clazz.resource_type }}"] = "{{ clazz.resource_type }}"
{%- endif %}

    class Meta:
        profile: typing.List[str] =[
        {% for url in clazz.urls %}   "{{url}}",
        {% endfor%}]
        """ Profiles this resource claims to conform to.
        List of `str` items. """


{% set enums = [] %}
{% for prop in clazz.properties %}
    {%- if prop.enum %}
        {%- if prop.enum.is_codesystem_known %}
            {{ enums.append({"name":prop.name, "enum": prop.enum.name}) or ""}}
        {%- endif %}
    {% endif %}
    {%- set type_name = prop.desired_classname %}
    {%- if not prop.is_native %}
        {%- set type_name = "\"{}\"".format(type_name) %}
    {%- endif %}
    {%- if prop.is_array %}
        {%- if type_name == "FHIRString" %}{# all strings inside of arrays should be not empty #}
            {%- set type_name = 'typing.List[FHIRRequiredString]' %}
        {%- else %}
            {%- set type_name = "typing.List[{}]".format(type_name) %}
        {%- endif %}
    {%- endif %}
    {%- if prop.enum %}
        {%- if not prop.enum.is_codesystem_known and prop.enum.restricted_to %}
            {%- set tmp_list = [] %}
            {%- for code in prop.enum.restricted_to %}
                {% do tmp_list.append('"' + code + '"') %}
            {%- endfor %}
            {%- set type_name = 'typing.Literal[{}]'.format(tmp_list |join(", ")) %}
        {%- endif %}
    {% endif %}
    {%- if prop.is_optional or prop.choice_of_type %}{# one of many https://www.hl7.org/fhir/formats.html#choice #}
        {%- set type_name = "typing.Optional[{}]".format(type_name) %}
    {%- endif %}
    {%- if type_name == "FHIRString" and not prop.is_optional %}{# required strings should be not empty #}
        {%- set type_name = "FHIRRequiredString" %}
    {%- endif %}
    {{ prop.name | snake_case }}: {{ type_name }}

    """ {{ prop.short|wordwrap(67, wrapstring="\n        ") }}.
    {% if prop.is_array %}List of{% else %}Type{% endif %} `{{ prop.desired_classname }}`{% if prop.is_array %} items{% endif %}
    {%- if prop.reference_to_names|length > 0 %} referencing `{{ prop.reference_to_names|join(', ') }}`{% endif %}
    {%- if prop.json_class != prop.desired_classname %} (represented as `{{ prop.json_class }}` in JSON){% endif %}.
    {%- if prop.is_json_primitive_field %} Is a JSON Primitive element.{% endif %}
    """

    {%- if prop.is_json_primitive_field %}
    {%- set type_name = "typing.Optional[\"PrimitiveExtension\"]" %}
    {%- if prop.is_array %}
        {%- set type_name = "typing.Optional[typing.List[{}]]".format(type_name) %}
    {%- endif %}

    {{ prop.name | snake_case }}__extension: {{ type_name }}

    """
    Extension of a JSON primitive element. 
    Property is represented in JSON as `_{{ prop.name | snake_case }}`
    but an alias is used in order to be validated by Pydantic.
    See : https://www.hl7.org/fhir/json.html#primitive
    """
    {% endif %}

{%- if prop.desired_classname == "Resource" %}
    @pydantic.validator("{{ prop.name | snake_case }}", pre=True,  each_item=True)
    def resource_factory(cls, value):
        if isinstance(value, Resource):
            return value
        return from_dict(value)
{%- endif %}
{% endfor %}

{% for choice_prop, compound in clazz.choice_properties.items() %}
#   {{ clazz.properties_map[compound[0]].__dict__}}
    _{{choice_prop | snake_case}}_choice_of_type_validator = pydantic.root_validator(allow_reuse=True) \
     (choice_of_validator(set({{compound | map('snake_case') | list}}), {{clazz.properties_map[compound[0]].is_optional}}))
{% endfor %}
{%-if enums %}
    class Config:

        @staticmethod
        def schema_extra(schema: typing.Dict[str, typing.Any]) -> None:
        {%- for enum in enums %}
            {%-if enum["enum"] == "DaysOfWeek"%}
            enums = schema["properties"]["{{ enum["name"] }}"]["items"]["enum"]
            {%- else %}
            enums = schema["properties"]["{{ enum["name"] }}"]["enum"]
            {%- endif  %}
            enums.clear()
            for item in {{ enum["enum"] }}:
                a = {"value": item.value, "description": item.__doc__}
                enums.append(a)
        {% endfor %}
{% endif %}
